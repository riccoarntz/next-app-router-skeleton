{{# if isCmsComponent }}

{{/if}}
import classNames from 'clsx';
import type { ReactElement, RefObject } from 'react';
import { forwardRef, useRef } from 'react';
import styles from './{{pascalCase componentName}}.module.scss';
import { setupTransitionInTimeline, setupTransitionOutTimeline } from './{{pascalCase componentName}}.transitions';
// import { useChangeTransitionState } from 'util/react-transition-component/hooks/useChangeTransitionState';
import {
  useScrollTransition,
} from 'util/react-transition-component';
import type { {{pascalCase componentName}}Props, {{pascalCase componentName}}Ref } from './{{pascalCase componentName}}.data';
import type { BaseButtonRef } from 'components/atoms/base-button/BaseButton.data';
import BaseButton from 'components/atoms/base-button/BaseButton';
import {
  defaultCanTransitionIn,
  defaultDisableTriggerInOnScroll,
} from 'util/react-transition-component/types/transitionComponent.types';
import Text from 'components/atoms/text/Text';

export default forwardRef<{{pascalCase componentName}}Ref, {{pascalCase componentName}}Props>(({
  disableTriggerInOnScroll = defaultDisableTriggerInOnScroll,
  canTransitionIn = defaultCanTransitionIn,
  ...props
}, ref): ReactElement => {
  const localRef = useRef<BaseButtonRef>();
  const elementRef = (ref || localRef) as RefObject<BaseButtonRef>;

  useScrollTransition({
    scroll: {
      trigger: elementRef,
      canTransitionIn,
      enableInView: false,
      disableTriggerInOnScroll,
    },
    setupOptions: () => ({
      ref: elementRef,
      refs: {
        elementRef,
      },
      setupTransitionInTimeline,
      setupTransitionOutTimeline,
    }),
  });

  // useChangeTransitionState(transitionController, isVisible);

  return (
    <BaseButton
      className={classNames(styles.{{camelCase componentName}}, props.className) }
      ref={elementRef}
      type={props.type}
      disabled={props.disabled}
      href={props.href}
      target={props.target}
      rel={props.rel}
      link={props.link}
      label={props.label}
      title={props.title}
      ariaLabel={props.ariaLabel}
      onClick={props.onClick}
    >
      <Text
        transitionInType='none'
        className={classNames(styles.label)}
        as="span"
        size='body-20'
      >
        {props.label}
      </Text>
    </BaseButton>
  );
});
